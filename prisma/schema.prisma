// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum eUserType {
  ADMIN
  REFREE
  USER
  PLAYER
  COACH
}

enum eMatchStatusType {
  SCHEDULED
  CANCELLED
  LIVE
  COMPLETED
}

model User {
  id            String      @id @default(uuid()) @db.Uuid
  first_name    String
  last_name     String?
  user_name     String      @unique
  role          eUserType   @default(USER)
  email         String      @unique
  mobile_number String      @unique
  hash_password String
  team          Team?       @relation(fields: [teamId], references: [id])
  teamId        String?     @unique @db.Uuid
  MatchStat     MatchStat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id        String      @id @default(uuid()) @db.Uuid
  name      String
  User      User[]
  Match1    Match[]     @relation("match_team1")
  Match2    Match[]     @relation("match_team2")
  Winner    Match[]     @relation("winner")
  MatchStat MatchStat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Match {
  id          String           @id @default(uuid()) @db.Uuid
  team1       Team             @relation("match_team1", fields: [team1Id], references: [id])
  team1Id     String           @db.Uuid
  team2       Team             @relation("match_team2", fields: [team2Id], references: [id])
  team2Id     String           @db.Uuid
  schedule    DateTime?
  team1_score Int              @default(0)
  team2_score Int              @default(0)
  winner      Team?            @relation("winner", fields: [winnerId], references: [id])
  winnerId    String?          @db.Uuid
  status      eMatchStatusType @default(SCHEDULED)
  MatchStat   MatchStat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MatchStat {
  id       String @id @default(uuid()) @db.Uuid
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String @db.Uuid
  match    Match  @relation(fields: [matchId], references: [id])
  matchId  String @db.Uuid
  player   User   @relation(fields: [playerId], references: [id])
  playerId String @db.Uuid
  goals    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
